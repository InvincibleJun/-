{"E:\\blog-user\\config\\env.js":{"size":3462,"mtime":1523411265564,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\config\\env.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"'use strict'\r\n\r\nconst fs = require('fs')\r\nconst path = require('path')\r\nconst paths = require('./paths')\r\n\r\n// Make sure that including paths.js after env.js will read .env variables.\r\ndelete require.cache[require.resolve('./paths')]\r\n\r\nconst NODE_ENV = process.env.NODE_ENV\r\nif (!NODE_ENV) {\r\n  throw new Error(\r\n    'The NODE_ENV environment variable is required but was not specified.'\r\n  )\r\n}\r\n\r\n// https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use\r\nvar dotenvFiles = [\r\n  `${paths.dotenv}.${NODE_ENV}.local`,\r\n  `${paths.dotenv}.${NODE_ENV}`,\r\n  // Don't include `.env.local` for `test` environment\r\n  // since normally you expect tests to produce the same\r\n  // results for everyone\r\n  NODE_ENV !== 'test' && `${paths.dotenv}.local`,\r\n  paths.dotenv\r\n].filter(Boolean)\r\n\r\n// Load environment variables from .env* files. Suppress warnings using silent\r\n// if this file is missing. dotenv will never modify any environment variables\r\n// that have already been set.\r\n// https://github.com/motdotla/dotenv\r\ndotenvFiles.forEach(dotenvFile => {\r\n  if (fs.existsSync(dotenvFile)) {\r\n    require('dotenv').config({\r\n      path: dotenvFile\r\n    })\r\n  }\r\n})\r\n\r\n// We support resolving modules according to `NODE_PATH`.\r\n// This lets you use absolute paths in imports inside large monorepos:\r\n// https://github.com/facebookincubator/create-react-app/issues/253.\r\n// It works similar to `NODE_PATH` in Node itself:\r\n// https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders\r\n// Note that unlike in Node, only *relative* paths from `NODE_PATH` are honored.\r\n// Otherwise, we risk importing Node.js core modules into an app instead of Webpack shims.\r\n// https://github.com/facebookincubator/create-react-app/issues/1023#issuecomment-265344421\r\n// We also resolve them to make sure all tools using them work consistently.\r\nconst appDirectory = fs.realpathSync(process.cwd())\r\nprocess.env.NODE_PATH = (process.env.NODE_PATH || '')\r\n  .split(path.delimiter)\r\n  .filter(folder => folder && !path.isAbsolute(folder))\r\n  .map(folder => path.resolve(appDirectory, folder))\r\n  .join(path.delimiter)\r\n\r\n// Grab NODE_ENV and REACT_APP_* environment variables and prepare them to be\r\n// injected into the application via DefinePlugin in Webpack configuration.\r\nconst REACT_APP = /^REACT_APP_/i\r\n\r\nfunction getClientEnvironment (publicUrl) {\r\n  const raw = Object.keys(process.env)\r\n    .filter(key => REACT_APP.test(key))\r\n    .reduce(\r\n      (env, key) => {\r\n        env[key] = process.env[key]\r\n        return env\r\n      },\r\n      {\r\n        // Useful for determining whether weâ€™re running in production mode.\r\n        // Most importantly, it switches React into the correct mode.\r\n        NODE_ENV: process.env.NODE_ENV || 'development',\r\n        // Useful for resolving the correct path to static assets in `public`.\r\n        // For example, <img src={process.env.PUBLIC_URL + '/img/logo.png'} />.\r\n        // This should only be used as an escape hatch. Normally you would put\r\n        // images into the `src` and `import` them in code to get their paths.\r\n        PUBLIC_URL: publicUrl\r\n      }\r\n    )\r\n  // Stringify all values so we can feed into Webpack DefinePlugin\r\n  const stringified = {\r\n    'process.env': Object.keys(raw).reduce((env, key) => {\r\n      env[key] = JSON.stringify(raw[key])\r\n      return env\r\n    }, {})\r\n  }\r\n\r\n  return { raw, stringified }\r\n}\r\n\r\nmodule.exports = getClientEnvironment\r\n"}},"E:\\blog-user\\config\\jest\\cssTransform.js":{"size":334,"mtime":1523411265564,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\config\\jest\\cssTransform.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"'use strict'\r\n\r\n// This is a custom Jest transformer turning style imports into empty objects.\r\n// http://facebook.github.io/jest/docs/tutorial-webpack.html\r\n\r\nmodule.exports = {\r\n  process () {\r\n    return 'module.exports = {};'\r\n  },\r\n  getCacheKey () {\r\n    // The output is always the same.\r\n    return 'cssTransform'\r\n  }\r\n}\r\n"}},"E:\\blog-user\\config\\jest\\fileTransform.js":{"size":323,"mtime":1523411265565,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\config\\jest\\fileTransform.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"'use strict'\r\n\r\nconst path = require('path')\r\n\r\n// This is a custom Jest transformer turning file imports into filenames.\r\n// http://facebook.github.io/jest/docs/tutorial-webpack.html\r\n\r\nmodule.exports = {\r\n  process (src, filename) {\r\n    return `module.exports = ${JSON.stringify(path.basename(filename))};`\r\n  }\r\n}\r\n"}},"E:\\blog-user\\config\\paths.js":{"size":2030,"mtime":1523411265566,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\config\\paths.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"'use strict'\r\n\r\nconst path = require('path')\r\nconst fs = require('fs')\r\nconst url = require('url')\r\n\r\n// Make sure any symlinks in the project folder are resolved:\r\n// https://github.com/facebookincubator/create-react-app/issues/637\r\nconst appDirectory = fs.realpathSync(process.cwd())\r\nconst resolveApp = relativePath => path.resolve(appDirectory, relativePath)\r\n\r\nconst envPublicUrl = process.env.PUBLIC_URL\r\n\r\nfunction ensureSlash (path, needsSlash) {\r\n  const hasSlash = path.endsWith('/')\r\n  if (hasSlash && !needsSlash) {\r\n    return path.substr(path, path.length - 1)\r\n  } else if (!hasSlash && needsSlash) {\r\n    return `${path}/`\r\n  } else {\r\n    return path\r\n  }\r\n}\r\n\r\nconst getPublicUrl = appPackageJson =>\r\n  envPublicUrl || require(appPackageJson).homepage\r\n\r\n// We use `PUBLIC_URL` environment variable or \"homepage\" field to infer\r\n// \"public path\" at which the app is served.\r\n// Webpack needs to know it to put the right <script> hrefs into HTML even in\r\n// single-page apps that may serve index.html for nested URLs like /todos/42.\r\n// We can't use a relative path in HTML because we don't want to load something\r\n// like /todos/42/static/js/bundle.7289d.js. We have to know the root.\r\nfunction getServedPath (appPackageJson) {\r\n  const publicUrl = getPublicUrl(appPackageJson)\r\n  const servedUrl =\r\n    envPublicUrl || (publicUrl ? url.parse(publicUrl).pathname : '/')\r\n  return ensureSlash(servedUrl, true)\r\n}\r\n\r\n// config after eject: we're in ./config/\r\nmodule.exports = {\r\n  dotenv: resolveApp('.env'),\r\n  appBuild: resolveApp('build'),\r\n  appPublic: resolveApp('public'),\r\n  appHtml: resolveApp('public/index.html'),\r\n  appIndexJs: resolveApp('src/index.js'),\r\n  appPackageJson: resolveApp('package.json'),\r\n  appSrc: resolveApp('src'),\r\n  yarnLockFile: resolveApp('yarn.lock'),\r\n  testsSetup: resolveApp('src/setupTests.js'),\r\n  appNodeModules: resolveApp('node_modules'),\r\n  publicUrl: getPublicUrl(resolveApp('package.json')),\r\n  servedPath: getServedPath(resolveApp('package.json'))\r\n}\r\n"}},"E:\\blog-user\\config\\polyfills.js":{"size":878,"mtime":1523411265566,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\config\\polyfills.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"'use strict'\r\n\r\nif (typeof Promise === 'undefined') {\r\n  // Rejection tracking prevents a common issue where React gets into an\r\n  // inconsistent state due to an error, but it gets swallowed by a Promise,\r\n  // and the user has no idea what causes React's erratic future behavior.\r\n  require('promise/lib/rejection-tracking').enable()\r\n  window.Promise = require('promise/lib/es6-extensions.js')\r\n}\r\n\r\n// fetch() polyfill for making API calls.\r\nrequire('whatwg-fetch')\r\n\r\n// Object.assign() is commonly used with React.\r\n// It will use the native implementation if it's present and isn't buggy.\r\nObject.assign = require('object-assign')\r\n\r\n// In tests, polyfill requestAnimationFrame since jsdom doesn't provide it yet.\r\n// We don't polyfill it in the browser--this is user's responsibility.\r\nif (process.env.NODE_ENV === 'test') {\r\n  require('raf').polyfill(global)\r\n}\r\n"}},"E:\\blog-user\\config\\webpack.config.dev.js":{"size":12589,"mtime":1523411265566,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\config\\webpack.config.dev.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"\r\nconst autoprefixer = require('autoprefixer')\r\nconst path = require('path')\r\nconst webpack = require('webpack')\r\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\r\nconst CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin')\r\nconst InterpolateHtmlPlugin = require('react-dev-utils/InterpolateHtmlPlugin')\r\nconst WatchMissingNodeModulesPlugin = require('react-dev-utils/WatchMissingNodeModulesPlugin')\r\nconst eslintFormatter = require('react-dev-utils/eslintFormatter')\r\nconst ModuleScopePlugin = require('react-dev-utils/ModuleScopePlugin')\r\nconst getClientEnvironment = require('./env')\r\nconst paths = require('./paths')\r\n\r\n// Webpack uses `publicPath` to determine where the app is being served from.\r\n// In development, we always serve from the root. This makes config easier.\r\nconst publicPath = '/'\r\n// `publicUrl` is just like `publicPath`, but we will provide it to our app\r\n// as %PUBLIC_URL% in `index.html` and `process.env.PUBLIC_URL` in JavaScript.\r\n// Omit trailing slash as %PUBLIC_PATH%/xyz looks better than %PUBLIC_PATH%xyz.\r\nconst publicUrl = ''\r\n// Get environment variables to inject into our app.\r\nconst env = getClientEnvironment(publicUrl)\r\n\r\n// This is the development configuration.\r\n// It is focused on developer experience and fast rebuilds.\r\n// The production configuration is different and lives in a separate file.\r\nmodule.exports = {\r\n  // You may want 'eval' instead if you prefer to see the compiled output in DevTools.\r\n  // See the discussion in https://github.com/facebookincubator/create-react-app/issues/343.\r\n  devtool: 'cheap-module-source-map',\r\n  // These are the \"entry points\" to our application.\r\n  // This means they will be the \"root\" imports that are included in JS bundle.\r\n  // The first two entry points enable \"hot\" CSS and auto-refreshes for JS.\r\n  entry: [\r\n    // We ship a few polyfills by default:\r\n    require.resolve('./polyfills'),\r\n    // Include an alternative client for WebpackDevServer. A client's job is to\r\n    // connect to WebpackDevServer by a socket and get notified about changes.\r\n    // When you save a file, the client will either apply hot updates (in case\r\n    // of CSS changes), or refresh the page (in case of JS changes). When you\r\n    // make a syntax error, this client will display a syntax error overlay.\r\n    // Note: instead of the default WebpackDevServer client, we use a custom one\r\n    // to bring better experience for Create React App users. You can replace\r\n    // the line below with these two lines if you prefer the stock client:\r\n    // require.resolve('webpack-dev-server/client') + '?/',\r\n    // require.resolve('webpack/hot/dev-server'),\r\n    require.resolve('react-dev-utils/webpackHotDevClient'),\r\n    // Finally, this is your app's code:\r\n    paths.appIndexJs\r\n    // We include the app code last so that if there is a runtime error during\r\n    // initialization, it doesn't blow up the WebpackDevServer client, and\r\n    // changing JS code would still trigger a refresh.\r\n  ],\r\n  output: {\r\n    // Add /* filename */ comments to generated require()s in the output.\r\n    pathinfo: true,\r\n    // This does not produce a real file. It's just the virtual path that is\r\n    // served by WebpackDevServer in development. This is the JS bundle\r\n    // containing code from all our entry points, and the Webpack runtime.\r\n    filename: 'static/js/bundle.js',\r\n    // There are also additional JS chunk files if you use code splitting.\r\n    chunkFilename: 'static/js/[name].chunk.js',\r\n    // This is the URL that app is served from. We use \"/\" in development.\r\n    publicPath: publicPath,\r\n    // Point sourcemap entries to original disk location (format as URL on Windows)\r\n    devtoolModuleFilenameTemplate: info =>\r\n      path.resolve(info.absoluteResourcePath).replace(/\\\\/g, '/')\r\n  },\r\n  resolve: {\r\n    // This allows you to set a fallback for where Webpack should look for modules.\r\n    // We placed these paths second because we want `node_modules` to \"win\"\r\n    // if there are any conflicts. This matches Node resolution mechanism.\r\n    // https://github.com/facebookincubator/create-react-app/issues/253\r\n    modules: ['node_modules', paths.appNodeModules].concat(\r\n      // It is guaranteed to exist because we tweak it in `env.js`\r\n      process.env.NODE_PATH.split(path.delimiter).filter(Boolean)\r\n    ),\r\n    // These are the reasonable defaults supported by the Node ecosystem.\r\n    // We also include JSX as a common component filename extension to support\r\n    // some tools, although we do not recommend using it, see:\r\n    // https://github.com/facebookincubator/create-react-app/issues/290\r\n    // `web` extension prefixes have been added for better support\r\n    // for React Native Web.\r\n    extensions: ['.web.js', '.mjs', '.js', '.json', '.web.jsx', '.jsx'],\r\n    alias: {\r\n\r\n      // Support React Native Web\r\n      // https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/\r\n      'react-native': 'react-native-web'\r\n    },\r\n    plugins: [\r\n      // Prevents users from importing files from outside of src/ (or node_modules/).\r\n      // This often causes confusion because we only process files within src/ with babel.\r\n      // To fix this, we prevent you from importing files out of src/ -- if you'd like to,\r\n      // please link the files into your node_modules/ and let module-resolution kick in.\r\n      // Make sure your source files are compiled, as they will not be processed in any way.\r\n      new ModuleScopePlugin(paths.appSrc, [paths.appPackageJson])\r\n    ]\r\n  },\r\n  module: {\r\n    strictExportPresence: true,\r\n    rules: [\r\n      // TODO: Disable require.ensure as it's not a standard language feature.\r\n      // We are waiting for https://github.com/facebookincubator/create-react-app/issues/2176.\r\n      // { parser: { requireEnsure: false } },\r\n\r\n      // First, run the linter.\r\n      // It's important to do this before Babel processes the JS.\r\n      {\r\n        test: /\\.(js|jsx|mjs)$/,\r\n        enforce: 'pre',\r\n        use: [\r\n          {\r\n            options: {\r\n              formatter: eslintFormatter,\r\n              eslintPath: require.resolve('eslint')\r\n\r\n            },\r\n            loader: require.resolve('eslint-loader')\r\n          }\r\n        ],\r\n        include: paths.appSrc\r\n      },\r\n      {\r\n        // \"oneOf\" will traverse all following loaders until one will\r\n        // match the requirements. When no loader matches it will fall\r\n        // back to the \"file\" loader at the end of the loader list.\r\n        oneOf: [\r\n          // \"url\" loader works like \"file\" loader except that it embeds assets\r\n          // smaller than specified limit in bytes as data URLs to avoid requests.\r\n          // A missing `test` is equivalent to a match.\r\n          {\r\n            test: [/\\.bmp$/, /\\.gif$/, /\\.jpe?g$/, /\\.png$/],\r\n            loader: require.resolve('url-loader'),\r\n            options: {\r\n              limit: 10000,\r\n              name: 'static/media/[name].[hash:8].[ext]'\r\n            }\r\n          },\r\n          // Process JS with Babel.\r\n          {\r\n            test: /\\.(js|jsx|mjs)$/,\r\n            include: paths.appSrc,\r\n            loader: require.resolve('babel-loader'),\r\n            options: {\r\n\r\n              // This is a feature of `babel-loader` for webpack (not Babel itself).\r\n              // It enables caching results in ./node_modules/.cache/babel-loader/\r\n              // directory for faster rebuilds.\r\n              cacheDirectory: true\r\n            }\r\n          },\r\n          // \"postcss\" loader applies autoprefixer to our CSS.\r\n          // \"css\" loader resolves paths in CSS and adds assets as dependencies.\r\n          // \"style\" loader turns CSS into JS modules that inject <style> tags.\r\n          // In production, we use a plugin to extract that CSS to a file, but\r\n          // in development \"style\" loader enables hot editing of CSS.\r\n          {\r\n            test: /\\.css$/,\r\n            use: [\r\n              require.resolve('style-loader'),\r\n              {\r\n                loader: require.resolve('css-loader'),\r\n                options: {\r\n                  importLoaders: 1\r\n                }\r\n              },\r\n              {\r\n                loader: require.resolve('postcss-loader'),\r\n                options: {\r\n                  // Necessary for external CSS imports to work\r\n                  // https://github.com/facebookincubator/create-react-app/issues/2677\r\n                  ident: 'postcss',\r\n                  plugins: () => [\r\n                    require('postcss-flexbugs-fixes'),\r\n                    autoprefixer({\r\n                      browsers: [\r\n                        '>1%',\r\n                        'last 4 versions',\r\n                        'Firefox ESR',\r\n                        'not ie < 9' // React doesn't support IE8 anyway\r\n                      ],\r\n                      flexbox: 'no-2009'\r\n                    })\r\n                  ]\r\n                }\r\n              }\r\n            ]\r\n          },\r\n          // \"file\" loader makes sure those assets get served by WebpackDevServer.\r\n          // When you `import` an asset, you get its (virtual) filename.\r\n          // In production, they would get copied to the `build` folder.\r\n          // This loader doesn't use a \"test\" so it will catch all modules\r\n          // that fall through the other loaders.\r\n          {\r\n            // Exclude `js` files to keep \"css\" loader working as it injects\r\n            // it's runtime that would otherwise processed through \"file\" loader.\r\n            // Also exclude `html` and `json` extensions so they get processed\r\n            // by webpacks internal loaders.\r\n            exclude: [/\\.js$/, /\\.html$/, /\\.json$/],\r\n            loader: require.resolve('file-loader'),\r\n            options: {\r\n              name: 'static/media/[name].[hash:8].[ext]'\r\n            }\r\n          }\r\n        ]\r\n      }\r\n      // ** STOP ** Are you adding a new loader?\r\n      // Make sure to add the new loader(s) before the \"file\" loader.\r\n    ]\r\n  },\r\n  plugins: [\r\n    // Makes some environment variables available in index.html.\r\n    // The public URL is available as %PUBLIC_URL% in index.html, e.g.:\r\n    // <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\r\n    // In development, this will be an empty string.\r\n    new InterpolateHtmlPlugin(env.raw),\r\n    // Generates an `index.html` file with the <script> injected.\r\n    new HtmlWebpackPlugin({\r\n      inject: true,\r\n      template: paths.appHtml\r\n    }),\r\n    // Add module names to factory functions so they appear in browser profiler.\r\n    new webpack.NamedModulesPlugin(),\r\n    // Makes some environment variables available to the JS code, for example:\r\n    // if (process.env.NODE_ENV === 'development') { ... }. See `./env.js`.\r\n    new webpack.DefinePlugin(env.stringified),\r\n    // This is necessary to emit hot updates (currently CSS only):\r\n    new webpack.HotModuleReplacementPlugin(),\r\n    // Watcher doesn't work well if you mistype casing in a path so we use\r\n    // a plugin that prints an error when you attempt to do this.\r\n    // See https://github.com/facebookincubator/create-react-app/issues/240\r\n    new CaseSensitivePathsPlugin(),\r\n    // If you require a missing module and then `npm install` it, you still have\r\n    // to restart the development server for Webpack to discover it. This plugin\r\n    // makes the discovery automatic so you don't have to restart.\r\n    // See https://github.com/facebookincubator/create-react-app/issues/186\r\n    new WatchMissingNodeModulesPlugin(paths.appNodeModules),\r\n    // Moment.js is an extremely popular library that bundles large locale files\r\n    // by default due to how Webpack interprets its code. This is a practical\r\n    // solution that requires the user to opt into importing specific locales.\r\n    // https://github.com/jmblog/how-to-optimize-momentjs-with-webpack\r\n    // You can remove this if you don't use Moment.js:\r\n    new webpack.IgnorePlugin(/^\\.\\/locale$/, /moment$/)\r\n  ],\r\n  // Some libraries import Node modules but don't use them in the browser.\r\n  // Tell Webpack to provide empty mocks for them so importing them works.\r\n  node: {\r\n    dgram: 'empty',\r\n    fs: 'empty',\r\n    net: 'empty',\r\n    tls: 'empty',\r\n    child_process: 'empty'\r\n  },\r\n  // Turn off performance hints during development because we don't do any\r\n  // splitting or minification in interest of speed. These warnings become\r\n  // cumbersome.\r\n  performance: {\r\n    hints: false\r\n  }\r\n}\r\n"}},"E:\\blog-user\\config\\webpackDevServer.config.js":{"size":5706,"mtime":1523411265567,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\config\\webpackDevServer.config.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"output":"\r\nconst errorOverlayMiddleware = require('react-dev-utils/errorOverlayMiddleware')\r\nconst noopServiceWorkerMiddleware = require('react-dev-utils/noopServiceWorkerMiddleware')\r\nconst path = require('path')\r\nconst config = require('./webpack.config.dev')\r\nconst paths = require('./paths')\r\n\r\nconst protocol = process.env.HTTPS === 'true' ? 'https' : 'http'\r\nconst host = process.env.HOST || '0.0.0.0'\r\n\r\nmodule.exports = function (proxy, allowedHost) {\r\n  return {\r\n    // WebpackDevServer 2.4.3 introduced a security fix that prevents remote\r\n    // websites from potentially accessing local content through DNS rebinding:\r\n    // https://github.com/webpack/webpack-dev-server/issues/887\r\n    // https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a\r\n    // However, it made several existing use cases such as development in cloud\r\n    // environment or subdomains in development significantly more complicated:\r\n    // https://github.com/facebookincubator/create-react-app/issues/2271\r\n    // https://github.com/facebookincubator/create-react-app/issues/2233\r\n    // While we're investigating better solutions, for now we will take a\r\n    // compromise. Since our WDS configuration only serves files in the `public`\r\n    // folder we won't consider accessing them a vulnerability. However, if you\r\n    // use the `proxy` feature, it gets more dangerous because it can expose\r\n    // remote code execution vulnerabilities in backends like Django and Rails.\r\n    // So we will disable the host check normally, but enable it if you have\r\n    // specified the `proxy` setting. Finally, we let you override it if you\r\n    // really know what you're doing with a special environment variable.\r\n    disableHostCheck:\r\n      !proxy || process.env.DANGEROUSLY_DISABLE_HOST_CHECK === 'true',\r\n    // Enable gzip compression of generated files.\r\n    compress: true,\r\n    // Silence WebpackDevServer's own logs since they're generally not useful.\r\n    // It will still show compile warnings and errors with this setting.\r\n    clientLogLevel: 'none',\r\n    // By default WebpackDevServer serves physical files from current directory\r\n    // in addition to all the virtual build products that it serves from memory.\r\n    // This is confusing because those files wonâ€™t automatically be available in\r\n    // production build folder unless we copy them. However, copying the whole\r\n    // project directory is dangerous because we may expose sensitive files.\r\n    // Instead, we establish a convention that only files in `public` directory\r\n    // get served. Our build script will copy `public` into the `build` folder.\r\n    // In `index.html`, you can get URL of `public` folder with %PUBLIC_URL%:\r\n    // <link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\r\n    // In JavaScript code, you can access it with `process.env.PUBLIC_URL`.\r\n    // Note that we only recommend to use `public` folder as an escape hatch\r\n    // for files like `favicon.ico`, `manifest.json`, and libraries that are\r\n    // for some reason broken when imported through Webpack. If you just want to\r\n    // use an image, put it in `src` and `import` it from JavaScript instead.\r\n    contentBase: paths.appPublic,\r\n    // By default files from `contentBase` will not trigger a page reload.\r\n    watchContentBase: true,\r\n    // Enable hot reloading server. It will provide /sockjs-node/ endpoint\r\n    // for the WebpackDevServer client so it can learn when the files were\r\n    // updated. The WebpackDevServer client is included as an entry point\r\n    // in the Webpack development configuration. Note that only changes\r\n    // to CSS are currently hot reloaded. JS changes will refresh the browser.\r\n    hot: true,\r\n    // It is important to tell WebpackDevServer to use the same \"root\" path\r\n    // as we specified in the config. In development, we always serve from /.\r\n    publicPath: config.output.publicPath,\r\n    // WebpackDevServer is noisy by default so we emit custom message instead\r\n    // by listening to the compiler events with `compiler.plugin` calls above.\r\n    quiet: true,\r\n    // Reportedly, this avoids CPU overload on some systems.\r\n    // https://github.com/facebookincubator/create-react-app/issues/293\r\n    // src/node_modules is not ignored to support absolute imports\r\n    // https://github.com/facebookincubator/create-react-app/issues/1065\r\n    watchOptions: {\r\n      ignored: new RegExp(\r\n        `^(?!${path\r\n          .normalize(paths.appSrc + '/')\r\n          .replace(/[\\\\]+/g, '\\\\\\\\')}).+[\\\\\\\\/]node_modules[\\\\\\\\/]`,\r\n        'g'\r\n      )\r\n    },\r\n    // Enable HTTPS if the HTTPS environment variable is set to 'true'\r\n    https: protocol === 'https',\r\n    host: host,\r\n    overlay: false,\r\n    historyApiFallback: {\r\n      // Paths with dots should still use the history fallback.\r\n      // See https://github.com/facebookincubator/create-react-app/issues/387.\r\n      disableDotRule: true\r\n    },\r\n    public: allowedHost,\r\n    proxy: {\r\n      '/api': {\r\n        target: 'http://120.78.222.240'\r\n      },\r\n      '/static': {\r\n        target: 'http://120.78.222.240'\r\n      }\r\n    },\r\n    before (app) {\r\n      // This lets us open files from the runtime error overlay.\r\n      app.use(errorOverlayMiddleware())\r\n      // This service worker file is effectively a 'no-op' that will reset any\r\n      // previous service worker registered for the same host:port combination.\r\n      // We do this in development to avoid hitting the production cache if\r\n      // it used the same host and port.\r\n      // https://github.com/facebookincubator/create-react-app/issues/2272#issuecomment-302832432\r\n      app.use(noopServiceWorkerMiddleware())\r\n    }\r\n  }\r\n}\r\n"}},"E:\\blog-user\\scripts\\build.js":{"size":5010,"mtime":1526108854739,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\scripts\\build.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\scripts\\start.js":{"size":3174,"mtime":1526108854745,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\scripts\\start.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\scripts\\test.js":{"size":748,"mtime":1526108854748,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\scripts\\test.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\actions\\draft.js":{"size":562,"mtime":1523412456849,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\actions\\draft.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\actions\\index.js":{"size":0,"mtime":1523411265578,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\actions\\index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\actions\\user.js":{"size":331,"mtime":1523412462659,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\actions\\user.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\App.js":{"size":3746,"mtime":1524051510406,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\App.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\components\\draft-edit.js":{"size":0,"mtime":1523411265596,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\components\\draft-edit.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\components\\md-upload.js":{"size":3538,"mtime":1523414451947,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\components\\md-upload.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\components\\modal.js":{"size":1174,"mtime":1523412311749,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\components\\modal.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\contants\\user.js":{"size":35,"mtime":1526108015791,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\contants\\user.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\index.js":{"size":572,"mtime":1526107972292,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\reducers\\index.js":{"size":330,"mtime":1523413763707,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\reducers\\index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\reducers\\models\\draft.js":{"size":250,"mtime":1524051446559,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\reducers\\models\\draft.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\reducers\\models\\user.js":{"size":258,"mtime":1523413760003,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\reducers\\models\\user.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\registerServiceWorker.js":{"size":4111,"mtime":1526108854758,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\registerServiceWorker.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\services\\api.js":{"size":367,"mtime":1523413230771,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\services\\api.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\services\\article.js":{"size":237,"mtime":1523413227821,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\services\\article.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\services\\draft.js":{"size":638,"mtime":1523413221027,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\services\\draft.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\services\\tag.js":{"size":208,"mtime":1523413229142,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\services\\tag.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\utils\\action-helper.js":{"size":0,"mtime":1523411265609,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\utils\\action-helper.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\utils\\cookie.js":{"size":218,"mtime":1523413261448,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\utils\\cookie.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\utils\\getQuery.js":{"size":346,"mtime":1523412431699,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\utils\\getQuery.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\utils\\request.js":{"size":2285,"mtime":1525852216289,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\utils\\request.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\views\\article\\_index\\ide.js":{"size":1954,"mtime":1523413051859,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\views\\article\\_index\\ide.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\views\\article\\draft.js":{"size":2660,"mtime":1523413207088,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\views\\article\\draft.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\views\\article\\index.js":{"size":3340,"mtime":1523412204131,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\views\\article\\index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\views\\article\\manage.js":{"size":1086,"mtime":1523412326220,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\views\\article\\manage.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\views\\index.js":{"size":170,"mtime":1523412439475,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\views\\index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\views\\statistics\\index.js":{"size":0,"mtime":1523411265613,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\views\\statistics\\index.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}},"E:\\blog-user\\src\\load.js":{"size":1510,"mtime":1526108917464,"hashOfConfig":"v2b87f","results":{"filePath":"E:\\blog-user\\src\\load.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0}}}